<?php

namespace Runalyze\Calculation\Performance;

class Model_MockTesterFilled extends Model {
	protected function prepareArrays() {}
	protected function finishArrays() {}
	protected function calculateArrays() {
		$this->Fitness = array(-1 => 10, 0 => 15, 1 => 20);
		$this->Fatigue = array(-1 => 15, 0 => 20, 1 => 15);
		$this->Performance = array(-1 => -10, 0 => -10, 1 => 0);
	}
}

class Model_MockTesterEmpty extends Model {
	protected function calculateArrays() {
		for ($i = $this->Range['from']; $i <= $this->Range['to']; ++$i) {
			$this->Fitness[$i] = 0;
			$this->Fatigue[$i] = 0;
			$this->Performance[$i] = 0;
		}
	}
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-10-25 at 11:29:26.
 */
class ModelTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Model
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Model_MockTesterFilled(array());
		$this->object->calculate();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Runalyze\Calculation\Performance\Model::setRange
	 */
	public function testRange() {
		$Model = new Model_MockTesterEmpty(array());
		$Model->setRange(-3, 4);
		$Model->calculate();

		$Expected = array();
		for ($i = -3; $i <= 4; ++$i)
			$Expected[$i] = 0;

		$this->assertEquals( array(
			Model::FITNESS => $Expected,
			Model::FATIGUE => $Expected,
			Model::PERFORMANCE => $Expected
		), $Model->getArrays() );
	}

	/**
	 * @covers Runalyze\Calculation\Performance\Model::getArrays
	 */
	public function testGetArrays() {
		$this->assertEquals( array(
			Model::FITNESS => array(-1 => 10, 0 => 15, 1 => 20),
			Model::FATIGUE => array(-1 => 15, 0 => 20, 1 => 15),
			Model::PERFORMANCE => array(-1 => -10, 0 => -10, 1 => 0)
		), $this->object->getArrays() );
	}

	/**
	 * @covers Runalyze\Calculation\Performance\Model::fitnessAt
	 */
	public function testFitnessAt() {
		$this->assertEquals( 10, $this->object->fitnessAt(-1) );
		$this->assertEquals( 15, $this->object->fitnessAt( 0) );
		$this->assertEquals( 20, $this->object->fitnessAt(+1) );
	}

	/**
	 * @covers Runalyze\Calculation\Performance\Model::fatigueAt
	 */
	public function testFatigueAt() {
		$this->assertEquals( 15, $this->object->fatigueAt(-1) );
		$this->assertEquals( 20, $this->object->fatigueAt( 0) );
		$this->assertEquals( 15, $this->object->fatigueAt(+1) );
	}

	/**
	 * @covers Runalyze\Calculation\Performance\Model::performanceAt
	 */
	public function testPerformanceAt() {
		$this->assertEquals( -10, $this->object->performanceAt(-1) );
		$this->assertEquals( -10, $this->object->performanceAt( 0) );
		$this->assertEquals(   0, $this->object->performanceAt(+1) );
	}

}
