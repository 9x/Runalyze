<?php

namespace Runalyze\Model\Route;

/**
 * Generated by hand
 */
class ObjectTest extends \PHPUnit_Framework_TestCase {

	protected function simpleObject() {
		return new Object(array(
			Object::NAME => 'Test route',
			Object::CITIES => 'City A - City B',
			Object::DISTANCE => 3.14,
			Object::ELEVATION => 20,
			Object::ELEVATION_UP => 20,
			Object::ELEVATION_DOWN => 15,
			Object::LATITUDES => array(47.7, 47.8),
			Object::LONGITUDES => array(7.8, 7.7),
			Object::ELEVATIONS_ORIGINAL => array(195, 210),
			Object::ELEVATIONS_CORRECTED => array(200, 220),
			Object::ELEVATIONS_SOURCE => 'unknown',
			Object::IN_ROUTENET => 1
		));
	}

	public function testEmptyObject() {
		$T = new Object();

		$this->assertFalse($T->hasPositionData());
		$this->assertFalse($T->has(Object::NAME));
		$this->assertFalse($T->has(Object::DISTANCE));
		$this->assertFalse($T->inRoutenet());
	}

	public function testSimpleObject() {
		$T = $this->simpleObject();

		$this->assertEquals('Test route', $T->name());
		$this->assertEquals(array('City A', 'City B'), $T->citiesAsArray());
		$this->assertEquals(3.14, $T->distance());
		$this->assertEquals(20, $T->elevation());
		$this->assertEquals(20, $T->elevationUp());
		$this->assertEquals(15, $T->elevationDown());
		$this->assertEquals(array(47.7, 47.8), $T->latitudes());
		$this->assertEquals(array(7.8, 7.7), $T->longitudes());
		$this->assertEquals(array(195, 210), $T->elevationsOriginal());
		$this->assertEquals(array(200, 220), $T->elevationsCorrected());
		$this->assertEquals('unknown', $T->get(Object::ELEVATIONS_SOURCE));
		$this->assertTrue($T->inRoutenet());
	}

	public function testSynchronization() {
		$T = $this->simpleObject();
		$T->synchronize();

		$this->assertEquals(47.7, $T->get(Object::STARTPOINT_LATITUDE));
		$this->assertEquals(7.8, $T->get(Object::STARTPOINT_LONGITUDE));
		$this->assertEquals(47.8, $T->get(Object::ENDPOINT_LATITUDE));
		$this->assertEquals(7.7, $T->get(Object::ENDPOINT_LONGITUDE));

		$this->assertEquals(47.7, $T->get(Object::MIN_LATITUDE));
		$this->assertEquals(7.7, $T->get(Object::MIN_LONGITUDE));
		$this->assertEquals(47.8, $T->get(Object::MAX_LATITUDE));
		$this->assertEquals(7.8, $T->get(Object::MAX_LONGITUDE));
	}

}
